CARPETA DE INSTALACIÓN:
Se identifica un proceso por un nombre en minúsculas; por ejemplo: "soroll"
Los archivos relacionados con este proceso se colocarán en la carpeta qVista\Codi\processos\soroll
En la carpeta qVista\Codi\processos estarán processing.py y processing.csv, necesarios para qVista
La función processing.run() está recubierta en processing.py para que qVista la controle
Esto posibilita que el usuario reciba información del progreso del proceso y de sus errores

CATÁLOGO EN FICHERO CSV:
En processing.csv cada línea define un proceso, con varios campos:
- NAME: identificador del proceso (en el ejemplo, 'soroll')
- TITLE: texto corto descriptivo del proceso
- STEPS: una etiqueta por cada llamada a processing.run(), separadas por comas
- DIALOG: indica si se lanza el diálogo de parámetros o no (por defecto, 'S')
- PROGRESS: indica si se informa al usuario del progreso de la ejecución (por defecto, 'S')
- GENERAL: indica si el proceso puede usarse desde cualquier proyecto o no (por defecto, 'N')
Estos campos se utilizarán para informar al usuario durante la ejecución del proceso
Ejemplo para "soroll", proceso con 3 pasos:
NAME;TITLE;STEPS;DIALOG;PROGRESS;GENERAL
soroll;Àrees d'interès;Clustering,Envelop,Buffering;S;S;N

CÓDIGO DE EJECUCIÓN:
Para soroll, el archivo que contiene el código a ejecutar se llamará soroll_processing.py
Las llamadas al iface de QGIS no pueden utilizarse desde qVista (no están disponibles en PyQGIS)
Las funciones necesarias del iface para el plugin hay que implementarlas en el módulo QvIface.py
Para que funcione tanto en qVista como en QGIS, el import de processing tendrá esta forma:
try: # qVista
    from processos.processing import *  
    from moduls.QvIface import QvIface as iface
    _Q_VISTA = True
except: # QGIS
    from qgis import processing
    from qgis.utils import iface
    _Q_VISTA = False
Del módulo processing solo se usará la función run y se comprobará el retorno:
    res = processing.run(algorithm, params)
    if res is None:
        return None
    else:
        # ...

FUNCIONES DE EJECUCIÓN:
soroll_processing.py puede incluir dos funciones sin parámetros para ser llamadas desde qVista:
- soroll_dialog(), que presenta al usuario un formulario de parámetros del proceso
- soroll_processing(), para ejecución directa sin formulario
Se ejecutará una u otra dependiendo del contenido del campo DIALOG del fichero csv
Hay que modificar el programa principal, soroll.py, para asegurarse de:
- Importar el módulo que contiene las funciones: from .soroll_processing import *
- Modificar run() para que acabe llamando a soroll_dialog():
def run(self):
	if self.first_start == True:
		self.first_start = False
		self.dlg = sorollDialog()

	self.dlg.barraEscala.clicked.connect(self.barraEscala)  

	soroll_dialog(self.dlg)


EJECUCIÓN CON FORMULARIO:
La función soroll_dialog() presentará el formulario para recoger los parámetros
Si va bien, la función retornará el QDialog creado; si no, devolverá None
from .soroll_dialog import sorollDialog
def soroll_dialog(dlg=None):
    try:
        if dlg is None: 
            dlg = sorollDialog()
        dlg.setWindowFlags(Qt.WindowStaysOnTopHint)       
        if _Q_VISTA:
            dlg.barraEscala.setEnabled(False)
        # ... 
        dlg.show()
        return dlg
    except Exception as e:
        print(str(e))
        if dlg is not None: dlg.hide()
        return None
Al aceptar el usuario, el formulario invocará a una función de soroll_processing.py
En el caso de soroll es la función Areas(), encargada de las llamadas a processing.run() 
En caso de error o excepción, retornará None
Si termina con éxito, devolverá el resultado del último processing.run()
def Areas(area_id, layer_name, npun, dis, buf):
    try:
        # ...
        res = create_buffer(area_id, output_layer_name, 
                            geometry_output_path, buffer_distance)
        if res is None:
            return None
        else:
            buffer_output_path = res['OUTPUT']
        # ...
        return res
    except Exception as e:
        print(str(e))
        return None

EJECUCIÓN SIN FORMULARIO:
La función soroll_processing() contendrá las llamadas a processing.run()
En caso de error o excepción, retornará None
Si termina con éxito, devolverá el resultado del último processing.run()
def soroll_processing():
    from PyQt5.QtWidgets import QLineEdit
    try:
        area_id = "1"
        layer_name = "Mycellium"
        npun = QLineEdit("100")
        dis = QLineEdit("60")
        buf = QLineEdit("60")
        res = Areas(area_id, layer_name, npun, dis, buf)
        return res
    except Exception as e:
        print(str(e))
        return None

EJEMPLOS DE USO DESDE QVISTA:
Ejemplo del uso común desde qVista, con diálogos que informan del progreso de la ejecución:
from moduls.QvProcess import QvProcess
process = QvProcess('soroll')
process.execute()
La función process.execute() devuelve True o False para indicar si el proceso acabó bien o no
Para ejecutar en modo silencioso (sin información del progreso), cambiar la segunda línea por:
process = QvProcess('soroll', False)

DOCS QGIS PROCESSING:
https://docs.qgis.org/3.22/en/docs/user_manual/processing/index.html
https://autogis-site.readthedocs.io/en/2018_/lessons/L7/processing-script.html
https://gis.stackexchange.com/questions/279874/using-qgis-processing-algorithms-from-pyqgis-standalone-scripts-outside-of-gui

